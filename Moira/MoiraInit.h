// -----------------------------------------------------------------------------
// This file is part of Moira - A Motorola 68k emulator
//
// Copyright (C) Dirk W. Hoffmann. www.dirkwhoffmann.de
// Licensed under the GNU General Public License v3
//
// See https://www.gnu.org for license information
// -----------------------------------------------------------------------------

/* This file declares all instruction handlers. All handlers follow a common
 * naming scheme:
 *
 *    execXXX : Handler for executing an instruction
 *    dasmXXX : Handler for disassembling an instruction
 */

#define MOIRA_DECLARE_EXEC_IMS(x) \
template <Instr I, Mode M, Size S> void exec##x(u16 op);

#define MOIRA_DECLARE_EXEC_CIMS(x) \
template <Core C, Instr I, Mode M, Size S> void exec##x(u16 op);

#define MOIRA_DECLARE_DASM_IMS(x) \
template <Instr I, Mode M, Size S> void dasm##x(StrWriter &str, u32 &addr, u16 op);

#define MOIRA_DECLARE_CIMS(x) \
MOIRA_DECLARE_EXEC_CIMS(x) \
MOIRA_DECLARE_DASM_IMS(x)


//
// Handlers
//

MOIRA_DECLARE_CIMS(LineA)
MOIRA_DECLARE_CIMS(LineF)
MOIRA_DECLARE_CIMS(Illegal)

MOIRA_DECLARE_CIMS(ShiftRg)
MOIRA_DECLARE_CIMS(ShiftIm)
MOIRA_DECLARE_CIMS(ShiftEa)

MOIRA_DECLARE_CIMS(Abcd)
MOIRA_DECLARE_CIMS(AddEaRg)
MOIRA_DECLARE_CIMS(AddRgEa)
MOIRA_DECLARE_CIMS(Adda)
MOIRA_DECLARE_CIMS(AddiRg)
MOIRA_DECLARE_CIMS(AddiEa)
MOIRA_DECLARE_CIMS(AddqDn)
MOIRA_DECLARE_CIMS(AddqAn)
MOIRA_DECLARE_CIMS(AddqEa)
MOIRA_DECLARE_CIMS(AddxRg)
MOIRA_DECLARE_CIMS(AddxEa)
MOIRA_DECLARE_CIMS(AndEaRg)
MOIRA_DECLARE_CIMS(AndRgEa)
MOIRA_DECLARE_CIMS(AndiRg)
MOIRA_DECLARE_CIMS(AndiEa)
MOIRA_DECLARE_CIMS(Andiccr)
MOIRA_DECLARE_CIMS(Andisr)

MOIRA_DECLARE_CIMS(Bcc)
MOIRA_DECLARE_CIMS(BitDxEa)
MOIRA_DECLARE_CIMS(BitImEa)
MOIRA_DECLARE_CIMS(BitField)
MOIRA_DECLARE_CIMS(Bkpt)
MOIRA_DECLARE_CIMS(Bsr)

MOIRA_DECLARE_CIMS(Callm)
MOIRA_DECLARE_CIMS(Cas)
MOIRA_DECLARE_CIMS(Cas2)
MOIRA_DECLARE_CIMS(Chk)
MOIRA_DECLARE_CIMS(Chk2)
MOIRA_DECLARE_CIMS(Clr)
MOIRA_DECLARE_CIMS(Cmp)
MOIRA_DECLARE_CIMS(Cmpa)
MOIRA_DECLARE_CIMS(CmpiRg)
MOIRA_DECLARE_CIMS(CmpiEa)
MOIRA_DECLARE_CIMS(Cmpm)
MOIRA_DECLARE_CIMS(CpBcc)
MOIRA_DECLARE_CIMS(CpDbcc)
MOIRA_DECLARE_CIMS(CpGen)
MOIRA_DECLARE_CIMS(CpRestore)
MOIRA_DECLARE_CIMS(CpSave)
MOIRA_DECLARE_CIMS(CpScc)
MOIRA_DECLARE_CIMS(CpTrapcc)

MOIRA_DECLARE_CIMS(Dbcc)
MOIRA_DECLARE_CIMS(Div)
MOIRA_DECLARE_CIMS(Divl)

MOIRA_DECLARE_CIMS(ExgDxDy)
MOIRA_DECLARE_CIMS(ExgAxDy)
MOIRA_DECLARE_CIMS(ExgAxAy)
MOIRA_DECLARE_CIMS(Ext)
MOIRA_DECLARE_CIMS(Extb)

MOIRA_DECLARE_CIMS(Jmp)
MOIRA_DECLARE_CIMS(Jsr)

MOIRA_DECLARE_CIMS(Lea)
MOIRA_DECLARE_CIMS(Link)

MOIRA_DECLARE_CIMS(Move0)
MOIRA_DECLARE_CIMS(Move2)
MOIRA_DECLARE_CIMS(Move3)
MOIRA_DECLARE_CIMS(Move4)
MOIRA_DECLARE_CIMS(Move5)
MOIRA_DECLARE_CIMS(Move6)
MOIRA_DECLARE_CIMS(Move7)
MOIRA_DECLARE_CIMS(Move8)
MOIRA_DECLARE_CIMS(Movea)
MOIRA_DECLARE_CIMS(MovecRcRx)
MOIRA_DECLARE_CIMS(MovecRxRc)
MOIRA_DECLARE_CIMS(MovemEaRg)
MOIRA_DECLARE_CIMS(MovemRgEa)
MOIRA_DECLARE_CIMS(MovepDxEa)
MOIRA_DECLARE_CIMS(MovepEaDx)
MOIRA_DECLARE_CIMS(Moveq)
MOIRA_DECLARE_CIMS(MoveFromCcrRg)
MOIRA_DECLARE_CIMS(MoveFromCcrEa)
MOIRA_DECLARE_CIMS(MoveToCcr)
MOIRA_DECLARE_CIMS(MoveFromSrRg)
MOIRA_DECLARE_CIMS(MoveFromSrEa)
MOIRA_DECLARE_CIMS(Moves)
MOIRA_DECLARE_CIMS(MoveToSr)
MOIRA_DECLARE_CIMS(MoveUspAn)
MOIRA_DECLARE_CIMS(MoveAnUsp)
MOIRA_DECLARE_CIMS(Mul)
MOIRA_DECLARE_CIMS(Mull)

MOIRA_DECLARE_CIMS(Nbcd)
MOIRA_DECLARE_CIMS(NegRg)
MOIRA_DECLARE_CIMS(NegEa)
MOIRA_DECLARE_CIMS(Nop)

MOIRA_DECLARE_CIMS(Pack)
MOIRA_DECLARE_CIMS(Pea)

MOIRA_DECLARE_CIMS(Reset)
MOIRA_DECLARE_CIMS(Rtd)
MOIRA_DECLARE_CIMS(Rte)
MOIRA_DECLARE_CIMS(Rtm)
MOIRA_DECLARE_CIMS(Rtr)
MOIRA_DECLARE_CIMS(Rts)

MOIRA_DECLARE_CIMS(SccRg)
MOIRA_DECLARE_CIMS(SccEa)
MOIRA_DECLARE_CIMS(Stop)
MOIRA_DECLARE_CIMS(Swap)

MOIRA_DECLARE_CIMS(TasRg)
MOIRA_DECLARE_CIMS(TasEa)
MOIRA_DECLARE_CIMS(Trap)
MOIRA_DECLARE_CIMS(Trapv)
MOIRA_DECLARE_CIMS(Trapcc)
MOIRA_DECLARE_CIMS(Tst)

MOIRA_DECLARE_CIMS(Unlk)
MOIRA_DECLARE_CIMS(Unpk)


// Musashi compatibility mode
template <Core C, Instr I, Mode M, Size S> void execMulMusashi(u16 op);
template <Core C, Instr I, Mode M, Size S> void execMullMusashi(u16 op);
template <Core C, Instr I, Mode M, Size S> void execDivMusashi(u16 op);
